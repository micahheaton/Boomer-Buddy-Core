import type { Express } from "express";
import { db } from "../db";
import { vulnerabilityProfiles } from "../../shared/schema";
import { eq } from "drizzle-orm";
import { insertVulnerabilityProfileSchema } from "../../shared/schema";
import { requireAuth } from "../auth";

export function registerVulnerabilityRoutes(app: Express) {
  // Get user's vulnerability profile
  app.get("/api/vulnerability-profile", requireAuth, async (req: any, res) => {
    try {
      const userId = req.user?.id;
      
      const [profile] = await db
        .select()
        .from(vulnerabilityProfiles)
        .where(eq(vulnerabilityProfiles.userId, userId))
        .limit(1);
      
      if (!profile) {
        return res.status(404).json({ message: "Profile not found" });
      }
      
      res.json(profile);
    } catch (error) {
      console.error("Error fetching vulnerability profile:", error);
      res.status(500).json({ message: "Failed to fetch profile" });
    }
  });

  // Create or update vulnerability profile
  app.post("/api/vulnerability-profile", requireAuth, async (req: any, res) => {
    try {
      const userId = req.user?.id;
      
      // Validate the request body
      const validatedData = insertVulnerabilityProfileSchema.parse({
        ...req.body,
        userId
      });

      // Check if profile exists
      const [existingProfile] = await db
        .select()
        .from(vulnerabilityProfiles)
        .where(eq(vulnerabilityProfiles.userId, userId))
        .limit(1);

      let profile;
      
      if (existingProfile) {
        // Update existing profile
        [profile] = await db
          .update(vulnerabilityProfiles)
          .set({
            ...validatedData,
            updatedAt: new Date()
          })
          .where(eq(vulnerabilityProfiles.userId, userId))
          .returning();
      } else {
        // Create new profile
        [profile] = await db
          .insert(vulnerabilityProfiles)
          .values(validatedData)
          .returning();
      }

      res.status(201).json(profile);
    } catch (error) {
      console.error("Error saving vulnerability profile:", error);
      if (error instanceof Error && error.name === 'ZodError') {
        return res.status(400).json({ 
          message: "Invalid data", 
          errors: (error as any).errors 
        });
      }
      res.status(500).json({ message: "Failed to save profile" });
    }
  });

  // Get educational resources based on profile (premium feature)
  app.get("/api/educational-resources", async (req, res) => {
    try {
      // This would normally fetch from a database, but for now return curated content
      const resources = [
        {
          id: 'emergency-scam-guide',
          title: 'What to Do If You\'re Being Scammed Right Now',
          description: 'Immediate steps to take if you suspect you\'re involved in an active scam',
          category: 'Emergency Response',
          difficulty: 'beginner',
          estimatedTime: '5 minutes',
          isPremium: false,
          content: {
            summary: 'Quick action guide for current scam victims',
            keyPoints: [
              'Stop all communication with the scammer immediately',
              'Do not send any more money or information',
              'Contact your bank if you\'ve shared financial details',
              'Report the scam to authorities'
            ],
            actionSteps: [
              'Hang up the phone or close the email',
              'Call your bank to secure accounts',
              'File a report with local police',
              'Report to FTC at reportfraud.ftc.gov'
            ]
          }
        }
      ];
      
      res.json(resources);
    } catch (error) {
      console.error("Error fetching educational resources:", error);
      res.status(500).json({ message: "Failed to fetch resources" });
    }
  });
}