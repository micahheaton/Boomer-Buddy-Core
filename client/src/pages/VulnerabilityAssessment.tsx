import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Phone, 
  Mail, 
  MessageSquare, 
  User, 
  CreditCard, 
  Heart,
  Home,
  Brain,
  Award,
  BookOpen,
  ExternalLink,
  Lock
} from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface VulnerabilityProfile {
  id?: string;
  userId?: string;
  ageGroup: string;
  techComfort: string;
  previousExperience: string;
  currentSituation: string;
  attackTypes: string[];
  concernAreas: string[];
  supportLevel: string;
  riskScore: number;
  createdAt?: string;
  updatedAt?: string;
}

interface EducationalResource {
  id: string;
  title: string;
  description: string;
  category: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: string;
  vulnerabilityTypes: string[];
  content: {
    summary: string;
    keyPoints: string[];
    actionSteps: string[];
    warningSignsVideos?: string[];
    exampleScenarios: Array<{
      title: string;
      description: string;
      redFlags: string[];
      prevention: string[];
    }>;
  };
  resourceLinks: Array<{
    title: string;
    url: string;
    type: 'government' | 'nonprofit' | 'educational';
  }>;
  isPremium: boolean;
}

export default function VulnerabilityAssessment() {
  const { user, isAuthenticated } = useAuth();
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(0);
  const [profile, setProfile] = useState<VulnerabilityProfile>({
    ageGroup: '',
    techComfort: '',
    previousExperience: '',
    currentSituation: '',
    attackTypes: [],
    concernAreas: [],
    supportLevel: '',
    riskScore: 0
  });
  const [showResults, setShowResults] = useState(false);
  const [educationalResources, setEducationalResources] = useState<EducationalResource[]>([]);

  // Fetch existing profile if user is authenticated
  const { data: existingProfile } = useQuery({
    queryKey: ['/api/vulnerability-profile'],
    enabled: isAuthenticated,
    retry: false
  });

  // Save profile mutation
  const saveProfileMutation = useMutation({
    mutationFn: (profileData: VulnerabilityProfile) => 
      apiRequest('POST', '/api/vulnerability-profile', profileData),
    onSuccess: () => {
      toast({
        title: "Profile Saved",
        description: "Your vulnerability assessment has been saved to provide personalized recommendations.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability-profile'] });
    },
    onError: () => {
      toast({
        title: "Save Failed",
        description: "Please try again or complete the assessment without saving.",
        variant: "destructive",
      });
    }
  });

  useEffect(() => {
    if (existingProfile) {
      setProfile(existingProfile as VulnerabilityProfile);
      setShowResults(true);
      generateEducationalContent(existingProfile as VulnerabilityProfile);
    }
  }, [existingProfile]);

  const questions = [
    {
      id: 'ageGroup',
      title: 'What age group do you fall into?',
      type: 'single',
      options: [
        { value: '50-59', label: '50-59 years old' },
        { value: '60-69', label: '60-69 years old' },
        { value: '70-79', label: '70-79 years old' },
        { value: '80+', label: '80+ years old' },
        { value: 'prefer-not-to-say', label: 'Prefer not to say' }
      ]
    },
    {
      id: 'techComfort',
      title: 'How comfortable are you with technology?',
      type: 'single',
      options: [
        { value: 'very-comfortable', label: 'Very comfortable - I use smartphones, computers, and apps regularly' },
        { value: 'somewhat-comfortable', label: 'Somewhat comfortable - I can do basic tasks but sometimes need help' },
        { value: 'basic-user', label: 'Basic user - I mainly use phone calls and simple apps' },
        { value: 'minimal-use', label: 'Minimal use - I prefer face-to-face or phone interactions' }
      ]
    },
    {
      id: 'previousExperience',
      title: 'Have you ever fallen for or nearly fallen for a scam?',
      type: 'single',
      options: [
        { value: 'never', label: 'Never - I\'ve been fortunate to avoid scams' },
        { value: 'nearly', label: 'Nearly - I caught it before losing money or information' },
        { value: 'minor-loss', label: 'Yes - I lost a small amount of money or shared some information' },
        { value: 'significant-loss', label: 'Yes - I lost a significant amount of money or important information' },
        { value: 'multiple-times', label: 'Multiple times - I seem to be frequently targeted' }
      ]
    },
    {
      id: 'currentSituation',
      title: 'Are you currently dealing with any suspicious activity?',
      type: 'single',
      options: [
        { value: 'none', label: 'No current issues' },
        { value: 'suspicious-calls', label: 'Getting suspicious phone calls' },
        { value: 'suspicious-emails', label: 'Receiving suspicious emails' },
        { value: 'suspicious-texts', label: 'Getting suspicious text messages' },
        { value: 'ongoing-scam', label: 'I think I might be involved in an ongoing scam' },
        { value: 'identity-concerns', label: 'I\'m worried my identity may have been stolen' }
      ]
    },
    {
      id: 'attackTypes',
      title: 'Which types of scam attempts have you encountered? (Select all that apply)',
      type: 'multiple',
      options: [
        { value: 'phone-calls', label: 'Phone calls (fake IRS, Social Security, tech support)' },
        { value: 'emails', label: 'Email phishing attempts' },
        { value: 'text-messages', label: 'Text message scams' },
        { value: 'social-media', label: 'Social media friend requests or messages' },
        { value: 'dating-sites', label: 'Romance scams on dating sites' },
        { value: 'door-to-door', label: 'Door-to-door scammers' },
        { value: 'mail-scams', label: 'Mail/postal scams (fake checks, sweepstakes)' },
        { value: 'investment-fraud', label: 'Investment or cryptocurrency scams' },
        { value: 'charity-fraud', label: 'Fake charity requests' },
        { value: 'none-yet', label: 'I haven\'t encountered any scams yet' }
      ]
    },
    {
      id: 'concernAreas',
      title: 'What areas make you feel most vulnerable? (Select all that apply)',
      type: 'multiple',
      options: [
        { value: 'technology', label: 'Understanding new technology' },
        { value: 'finances', label: 'Managing finances and investments' },
        { value: 'health-insurance', label: 'Healthcare and insurance matters' },
        { value: 'social-isolation', label: 'Feeling lonely or isolated' },
        { value: 'family-concerns', label: 'Worries about family members' },
        { value: 'government-contact', label: 'Communication from government agencies' },
        { value: 'urgent-requests', label: 'Pressure to act quickly on requests' },
        { value: 'verifying-identity', label: 'Knowing who to trust when they contact me' }
      ]
    },
    {
      id: 'supportLevel',
      title: 'What support system do you have?',
      type: 'single',
      options: [
        { value: 'strong-support', label: 'Strong support - Family/friends I can ask for help' },
        { value: 'some-support', label: 'Some support - People I can call when needed' },
        { value: 'limited-support', label: 'Limited support - Few people to turn to' },
        { value: 'minimal-support', label: 'Minimal support - I mostly handle things alone' }
      ]
    }
  ];

  const handleAnswer = (questionId: string, value: string | string[]) => {
    setProfile(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const calculateRiskScore = (): number => {
    let score = 0;
    
    // Age group risk
    const ageRisk = { '50-59': 1, '60-69': 2, '70-79': 3, '80+': 4, 'prefer-not-to-say': 2 };
    score += ageRisk[profile.ageGroup as keyof typeof ageRisk] || 0;
    
    // Tech comfort risk (inverse)
    const techRisk = { 'very-comfortable': 1, 'somewhat-comfortable': 2, 'basic-user': 3, 'minimal-use': 4 };
    score += techRisk[profile.techComfort as keyof typeof techRisk] || 0;
    
    // Previous experience risk
    const experienceRisk = { 'never': 1, 'nearly': 2, 'minor-loss': 3, 'significant-loss': 4, 'multiple-times': 5 };
    score += experienceRisk[profile.previousExperience as keyof typeof experienceRisk] || 0;
    
    // Current situation risk
    const currentRisk = { 'none': 0, 'suspicious-calls': 2, 'suspicious-emails': 2, 'suspicious-texts': 2, 'ongoing-scam': 5, 'identity-concerns': 4 };
    score += currentRisk[profile.currentSituation as keyof typeof currentRisk] || 0;
    
    // Attack types exposure (more types = higher risk)
    score += Math.min(profile.attackTypes.length, 5);
    
    // Concern areas vulnerability
    score += Math.min(profile.concernAreas.length, 4);
    
    // Support level risk (inverse)
    const supportRisk = { 'strong-support': 1, 'some-support': 2, 'limited-support': 3, 'minimal-support': 4 };
    score += supportRisk[profile.supportLevel as keyof typeof supportRisk] || 0;
    
    return Math.min(Math.round((score / 25) * 100), 100);
  };

  const nextStep = () => {
    if (currentStep < questions.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      const riskScore = calculateRiskScore();
      const updatedProfile = { ...profile, riskScore };
      setProfile(updatedProfile);
      setShowResults(true);
      generateEducationalContent(updatedProfile);
      
      if (isAuthenticated) {
        saveProfileMutation.mutate(updatedProfile);
      }
    }
  };

  const generateEducationalContent = (assessmentProfile: VulnerabilityProfile) => {
    const resources: EducationalResource[] = [
      {
        id: 'phone-scam-protection',
        title: 'Phone Scam Protection Guide',
        description: 'Learn to identify and avoid phone scams targeting seniors',
        category: 'Phone Security',
        difficulty: 'beginner',
        estimatedTime: '15 minutes',
        vulnerabilityTypes: ['phone-calls', 'government-contact'],
        content: {
          summary: 'Phone scams are the most common way seniors are targeted. Learn the warning signs and protection strategies.',
          keyPoints: [
            'Government agencies never call to threaten you',
            'Never give personal information to unexpected callers',
            'Legitimate callers will allow you to call them back',
            'Use caller ID, but know it can be faked'
          ],
          actionSteps: [
            'Let unknown calls go to voicemail',
            'Verify caller identity through official numbers',
            'Never provide Social Security or banking information over the phone',
            'Hang up immediately on threatening calls'
          ],
          exampleScenarios: [
            {
              title: 'Fake Social Security Administration Call',
              description: 'Caller claims your SSN has been suspended due to suspicious activity',
              redFlags: ['Threatens immediate action', 'Asks for SSN verification', 'Demands payment'],
              prevention: ['SSA never calls about suspensions', 'Call SSA directly at 1-800-772-1213', 'Never pay over phone']
            }
          ]
        },
        resourceLinks: [
          { title: 'FTC Phone Scam Guide', url: 'https://consumer.ftc.gov/articles/phone-scams', type: 'government' },
          { title: 'AARP Fraud Watch', url: 'https://www.aarp.org/money/scams-fraud/', type: 'nonprofit' }
        ],
        isPremium: false
      },
      {
        id: 'email-phishing-advanced',
        title: 'Advanced Email Security for Seniors',
        description: 'Master email security with detailed phishing recognition',
        category: 'Email Security',
        difficulty: 'intermediate',
        estimatedTime: '25 minutes',
        vulnerabilityTypes: ['emails', 'technology'],
        content: {
          summary: 'Email phishing has become increasingly sophisticated. This comprehensive guide helps you spot even advanced attempts.',
          keyPoints: [
            'Check sender addresses carefully',
            'Look for spelling and grammar errors',
            'Be suspicious of urgent requests',
            'Never click links in suspicious emails'
          ],
          actionSteps: [
            'Hover over links to see actual destinations',
            'Forward suspicious emails to your email provider',
            'Set up two-factor authentication',
            'Use email filters and spam protection'
          ],
          exampleScenarios: [
            {
              title: 'Fake Bank Security Alert',
              description: 'Email appears from your bank claiming suspicious activity',
              redFlags: ['Generic greeting', 'Urgent action required', 'Suspicious link'],
              prevention: ['Log into bank directly', 'Call bank with official number', 'Check account normally']
            }
          ]
        },
        resourceLinks: [
          { title: 'FBI Internet Crime Report', url: 'https://www.fbi.gov/investigate/cyber', type: 'government' }
        ],
        isPremium: true
      },
      {
        id: 'romance-scam-prevention',
        title: 'Romance Scam Prevention & Recovery',
        description: 'Protect yourself from emotional manipulation in online relationships',
        category: 'Relationship Security',
        difficulty: 'intermediate',
        estimatedTime: '30 minutes',
        vulnerabilityTypes: ['dating-sites', 'social-isolation'],
        content: {
          summary: 'Romance scams exploit emotional vulnerability. Learn protection strategies and recovery resources.',
          keyPoints: [
            'Scammers create fake profiles with stolen photos',
            'They quickly profess love and create emergencies',
            'Never send money to someone you haven\'t met in person',
            'Video calls can be faked with deepfake technology'
          ],
          actionSteps: [
            'Reverse image search profile photos',
            'Insist on meeting in person in public places',
            'Talk to friends/family about new online relationships',
            'Be suspicious of anyone asking for money'
          ],
          exampleScenarios: [
            {
              title: 'Military Deployment Scam',
              description: 'Person claims to be deployed military needing money for leave',
              redFlags: ['Can\'t meet in person', 'Needs money urgently', 'Poor grammar'],
              prevention: ['Real military doesn\'t need money for leave', 'Verify through military channels', 'Meet before sending money']
            }
          ]
        },
        resourceLinks: [
          { title: 'Romance Scams - FTC Consumer Advice', url: 'https://consumer.ftc.gov/articles/romance-scams', type: 'government' }
        ],
        isPremium: true
      }
    ];

    // Filter resources based on user's vulnerability profile
    const relevantResources = resources.filter(resource => 
      resource.vulnerabilityTypes.some(type => 
        assessmentProfile.attackTypes.includes(type) || 
        assessmentProfile.concernAreas.includes(type)
      )
    );

    setEducationalResources(relevantResources.length > 0 ? relevantResources : resources);
  };

  const getRiskLevel = (score: number) => {
    if (score < 25) return { level: 'Low', color: 'text-green-600', bg: 'bg-green-100' };
    if (score < 50) return { level: 'Moderate', color: 'text-yellow-600', bg: 'bg-yellow-100' };
    if (score < 75) return { level: 'High', color: 'text-orange-600', bg: 'bg-orange-100' };
    return { level: 'Critical', color: 'text-red-600', bg: 'bg-red-100' };
  };

  if (showResults) {
    const risk = getRiskLevel(profile.riskScore);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-teal-50 to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
        <div className="container mx-auto px-4 py-8">
          
          {/* Results Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
              Your Vulnerability Assessment Results
            </h1>
            <p className="text-gray-600 dark:text-gray-300">
              Based on your responses, here are personalized recommendations to improve your digital safety
            </p>
          </div>

          {/* Risk Score Card */}
          <Card className="mb-8 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-6 w-6" />
                Your Risk Assessment
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <div className="text-2xl font-bold text-gray-900 dark:text-white">
                    {profile.riskScore}/100
                  </div>
                  <Badge className={`${risk.color} ${risk.bg}`}>
                    {risk.level} Risk
                  </Badge>
                </div>
                <div className="text-right">
                  <Progress value={profile.riskScore} className="w-32 mb-2" />
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Risk Level
                  </div>
                </div>
              </div>
              
              {profile.riskScore > 50 && (
                <Alert>
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    Your assessment indicates elevated risk. Review the personalized resources below to strengthen your defenses.
                  </AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* Educational Resources */}
          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
              Recommended Educational Resources
            </h2>
            <div className="grid gap-6">
              {educationalResources.map((resource) => (
                <Card key={resource.id} className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <CardTitle className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        {resource.title}
                        {resource.isPremium && (
                          <Lock className="h-4 w-4 text-yellow-600" />
                        )}
                      </CardTitle>
                      <div className="flex gap-2">
                        <Badge variant={resource.difficulty === 'beginner' ? 'secondary' : 'outline'}>
                          {resource.difficulty}
                        </Badge>
                        <Badge variant="outline">{resource.estimatedTime}</Badge>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 dark:text-gray-300 mb-4">
                      {resource.description}
                    </p>
                    
                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">Key Learning Points:</h4>
                      <ul className="list-disc list-inside space-y-1 text-sm text-gray-600 dark:text-gray-400">
                        {resource.content.keyPoints.map((point, index) => (
                          <li key={index}>{point}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">Action Steps:</h4>
                      <ul className="list-decimal list-inside space-y-1 text-sm text-gray-600 dark:text-gray-400">
                        {resource.content.actionSteps.map((step, index) => (
                          <li key={index}>{step}</li>
                        ))}
                      </ul>
                    </div>

                    {resource.content.exampleScenarios.length > 0 && (
                      <div className="mb-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <h4 className="font-semibold mb-2">Example Scenario:</h4>
                        <div className="text-sm">
                          <p className="mb-2"><strong>{resource.content.exampleScenarios[0].title}</strong></p>
                          <p className="mb-2 text-gray-600 dark:text-gray-400">{resource.content.exampleScenarios[0].description}</p>
                          <div className="grid md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-red-600">Red Flags:</p>
                              <ul className="list-disc list-inside text-xs text-gray-600 dark:text-gray-400">
                                {resource.content.exampleScenarios[0].redFlags.map((flag, i) => (
                                  <li key={i}>{flag}</li>
                                ))}
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-green-600">Prevention:</p>
                              <ul className="list-disc list-inside text-xs text-gray-600 dark:text-gray-400">
                                {resource.content.exampleScenarios[0].prevention.map((prev, i) => (
                                  <li key={i}>{prev}</li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">Official Resources:</h4>
                      <div className="flex flex-wrap gap-2">
                        {resource.resourceLinks.map((link, index) => (
                          <Button key={index} variant="outline" size="sm" asChild>
                            <a href={link.url} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1">
                              <ExternalLink className="h-3 w-3" />
                              {link.title}
                            </a>
                          </Button>
                        ))}
                      </div>
                    </div>

                    {resource.isPremium && !isAuthenticated && (
                      <Alert>
                        <Lock className="h-4 w-4" />
                        <AlertDescription>
                          This advanced resource is available with a premium subscription. Create an account to access detailed guides and personalized support.
                        </AlertDescription>
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="text-center space-x-4">
            <Button onClick={() => { setShowResults(false); setCurrentStep(0); }} variant="outline">
              Retake Assessment
            </Button>
            {!isAuthenticated && (
              <Button>
                Create Account to Save Results
              </Button>
            )}
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentStep];
  const progress = ((currentStep + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-teal-50 to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <Shield className="h-12 w-12 text-blue-600 dark:text-blue-400" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            Vulnerability Assessment
          </h1>
          <p className="text-gray-600 dark:text-gray-300">
            Help us understand your situation so we can provide personalized protection guidance
          </p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
            <span>Question {currentStep + 1} of {questions.length}</span>
            <span>{Math.round(progress)}% Complete</span>
          </div>
          <Progress value={progress} className="w-full" />
        </div>

        {/* Question Card */}
        <Card className="mb-8 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
          <CardHeader>
            <CardTitle>{currentQuestion.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {currentQuestion.options.map((option) => (
                <div key={option.value} className="flex items-center space-x-2">
                  <input
                    type={currentQuestion.type === 'multiple' ? 'checkbox' : 'radio'}
                    id={option.value}
                    name={currentQuestion.id}
                    value={option.value}
                    checked={
                      currentQuestion.type === 'multiple'
                        ? (profile[currentQuestion.id as keyof VulnerabilityProfile] as string[])?.includes(option.value)
                        : profile[currentQuestion.id as keyof VulnerabilityProfile] === option.value
                    }
                    onChange={(e) => {
                      if (currentQuestion.type === 'multiple') {
                        const currentValues = (profile[currentQuestion.id as keyof VulnerabilityProfile] as string[]) || [];
                        const newValues = e.target.checked
                          ? [...currentValues, option.value]
                          : currentValues.filter(v => v !== option.value);
                        handleAnswer(currentQuestion.id, newValues);
                      } else {
                        handleAnswer(currentQuestion.id, option.value);
                      }
                    }}
                    className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                  />
                  <label
                    htmlFor={option.value}
                    className="text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer"
                  >
                    {option.label}
                  </label>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Navigation */}
        <div className="flex justify-between">
          <Button
            variant="outline"
            onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}
            disabled={currentStep === 0}
          >
            Previous
          </Button>
          
          <Button
            onClick={nextStep}
            disabled={
              !profile[currentQuestion.id as keyof VulnerabilityProfile] ||
              (Array.isArray(profile[currentQuestion.id as keyof VulnerabilityProfile]) &&
               (profile[currentQuestion.id as keyof VulnerabilityProfile] as string[]).length === 0)
            }
          >
            {currentStep === questions.length - 1 ? 'Get My Results' : 'Next'}
          </Button>
        </div>

        {/* Privacy Notice */}
        {!isAuthenticated && (
          <Alert className="mt-8">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Your responses will be used only to provide personalized recommendations. 
              Create an account to save your results and access premium educational content.
            </AlertDescription>
          </Alert>
        )}
      </div>
    </div>
  );
}